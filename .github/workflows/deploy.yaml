name: Deploy to Production

on:
  pull_request:
    types:
      - closed

jobs:
  deploy:
    # if: github.event.pull_request.state == 'approved'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for ARM64
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --load \
            -t website_portfolio:${{ github.sha }} .
          docker save website_portfolio:${{ github.sha }} -o website_portfolio.tar

      - name: Copy Docker Image to Oracle Instance
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.ORACLE_PORT }}
          source: "website_portfolio.tar"
          target: "/home/${{ secrets.ORACLE_USERNAME }}/myapps/"

      - name: Setup SSH for deployment with zero downtime
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.ORACLE_PORT }}
          script: |
            # Load the new image
            docker load -i /home/${{ secrets.ORACLE_USERNAME }}/myapps/website_portfolio.tar

            # Tag as latest for easier management
            docker tag website_portfolio:${{ github.sha }} website_portfolio:latest

            # Check if container exists and is running
            if [ $(docker ps -q -f name=website_portfolio) ]; then
              # Zero-downtime deployment: start new container on different port
              docker run -d --name website_portfolio_new -p 3001:3000 -e HOST=0.0.0.0 -e PORT=3000 website_portfolio:latest

            # Wait for new container to be ready
            sleep 10

            # Test if new container is working
            if curl -f http://localhost:3001; then
              # Switch: stop old container and start new one on port 3000
              docker stop website_portfolio
              docker rm website_portfolio
              docker run -d --name website_portfolio -p 3000:3000 -e HOST=0.0.0.0 -e PORT=3000 website_portfolio:latest

              # Clean up temporary container
              docker stop website_portfolio_new
              docker rm website_portfolio_new

              echo "‚úÖ Zero-downtime deployment successful"
            else
                # Rollback: remove failed container
                docker stop website_portfolio_new
                docker rm website_portfolio_new
                echo "‚ùå New container failed health check, keeping old version"
                exit 1
              fi
            else
              # First deployment
              docker run -d --name website_portfolio -p 3000:3000 -e HOST=0.0.0.0 -e PORT=3000 website_portfolio:latest
              echo "‚úÖ First deployment successful"
            fi

            # Verify final deployment
            sleep 5
            if curl -f http://localhost:3000; then
              echo "üåê App is running at: http://$(curl -s ifconfig.me):3000"
            else
              echo "‚ùå Final health check failed"
              docker logs website_portfolio
              exit 1
            fi

            # Cleanup old images (keep last 3)
            docker images website_portfolio --format "table {{.ID}}\t{{.CreatedAt}}" | tail -n +4 | awk '{print $1}' | xargs -r docker rmi

            # Remove the tar file
            rm -f /home/${{ secrets.ORACLE_USERNAME }}/myapps/website_portfolio.tar
